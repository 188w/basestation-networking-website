var u=class{constructor(t){if(!t[0])throw new Error("Matrix at least one row");if(t.find((r,i)=>t[i-1]&&r.length!==t[i-1].length))throw new Error("Matrix column inconsistent");if(!t[0].length)throw new Error("Matrix has at least one element from row");this.shape=[t.length,t[0].length],this.self=t}slice(t,e){return new u(this.self.slice(t,e))}argMax(t){let e=this.getRow(t),r=e[0],i=0;for(let n=0;n<e.length;n++)e[n]>r&&(r=e[n],i=n);return i}connect(t){if(this.shape[1]!==t.shape[1])throw new Error("Matrix column inconsistent");let e=this.dataSync().concat(t.dataSync());return new u(e)}zeroed(){return this.atomicOperation(t=>0)}clone(){return new u(this.dataSync())}getMeanOfRow(t){let e=this.getRow(t);return e.reduce((r,i)=>r+i)/e.length}sum(){let t=0;for(let e=0;e<this.shape[0];e++)for(let r=0;r<this.shape[1];r++)t+=this.get(e,r);return t}columnSum(){let t=[];for(let e=0;e<this.shape[1];e++)t.push(this.getCol(e).reduce((r,i)=>r+i));return new u([t])}dataSync(){let t=[];for(let e=0;e<this.shape[0];e++){let r=[];for(let i=0;i<this.shape[1];i++)r.push(this.get(e,i));t.push(r)}return t}equalsShape(t){return this.shape[0]===t.shape[0]&&this.shape[1]===t.shape[1]}equals(t){if(!this.equalsShape(t))return!1;for(let e=0;e<this.shape[0];e++)for(let r=0;r<this.shape[1];r++)if(this.get(e,r)!==t.get(e,r))return!1;return!0}static generateIdentity(t){let e=this.generate(t,t,0),r=0;for(let i=0;i<e.shape[0];i++)e.update(i,r++,1);return e}static generate(t,e,r={range:[-.5,.5]}){let i=[];for(let n=0;n<t;n++){let s=[];for(let a=0;a<e;a++){let o=0;if(typeof r=="number")o=r;else{let[h,l]=[Math.min(...r.range),Math.max(...r.range)],c=h<0||l<0?-1:0;o=Math.random()*(l-h)+h+c,r.integer&&(o=~~o)}s.push(o)}i.push(s)}return new u(i)}update(t,e,r,i){switch(i){case"+=":this.self[t][e]+=r;break;case"-=":this.se